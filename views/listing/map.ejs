 <% layout("/layout/boilerplate.ejs") %> 

<style>
    button {
        position: absolute;
        margin: 20px;
        left: 30%;
        bottom: 75%;
        font:
            bold 12px/20px 'Helvetica Neue',
            Arial,
            Helvetica,
            sans-serif;
        background-color: #3386c0;
        color: #fff;
        z-index: 1;
        border: none;
        width: 200px;
        cursor: pointer;
        padding: 10px 20px;
        border-radius: 3px;
    }

    button:hover {
        background-color: #4ea0da;
    }

    /* Style the marker div as a circle with a background image */
    .marker {
        background-image: url('https://plus.unsplash.com/premium_vector-1721985545296-cb3e94699157?q=80&w=2360&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
        background-size: contain;
        background-position-x: 50%;
        background-repeat: no-repeat;
        border-radius: 50%;
        cursor: pointer;
        transition-property: width, height;
        transition-duration: 0.1s;
        transition-timing-function: linear;
        /* Define Marker Animation */
        animation:
            pop-in 0.3s ease-out forwards,
            wobble 1.5s ease-in-out 0.3s forwards;
        transform-origin: bottom center;
    }

    /* Create a css triangle and add to the bottom of the marker for the marker point */
    .marker::before {
        content: '';
        width: 0;
        height: 0;
        border-left: 7px solid transparent;
        border-right: 7px solid transparent;
        border-top: 7px solid #365874;
        display: block;
        position: absolute;
        bottom: -5px;
        left: 50%;
        transform: translateX(-50%);
    }

    /* Keyframe animation for pop-in */
    @keyframes pop-in {
        0% {
            width: 0px;
            height: 0px;
            opacity: 0;
            box-shadow: none;
        }
        70% {
            width: 55px;
            height: 55px;
            opacity: 1;
            box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.4); /* Add a subtle shadow */
        }
        85% {
            width: 48px;
            height: 48px;
            box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.3); /* Shrink shadow with wobble */
        }
        100% {
            width: 50px;
            height: 50px;
            box-shadow: 0px 0px 6px rgba(0, 0, 0, 0.3); /* Final shadow size */
        }
    }

    /* Keyframe animation for slow wobble after pop-in */
    @keyframes wobble {
        0% {
            transform: rotate(0deg);
        }
        20% {
            transform: rotate(2.5deg);
        }
        50% {
            transform: rotate(-2deg);
        }
        65% {
            transform: rotate(1deg);
        }
        100% {
            transform: rotate(0deg);
        }
    }
    .cartButton {
        background-color: #087122;
        color: #fff;
        border: none;
        width: 120px;
        height: 45px;
        cursor: pointer;
        padding: 10px 20px;
        border-radius: 3px;
        position: absolute;
        top: 75%;
        left: 45%;
    }
    #addMarker{
        background-color: #087122;
        position: absolute;
        left: 51%;
        top: 21%;
        height: 50px;
    }
</style>
<div class="map_featuring">
    <div>
        <div class="card" style="width: 18rem;">
  <img src="<%= Product.image %>"  class="card-img-top image" alt="...">
  <div class="card-body">
    <p class="card-text"><b><%= Product.title %></b><br><%= Product.quantity %> g</p>
    
    <div class="button" style="display: flex; flex-wrap: wrap; justify-content: space-between;">
    <p class="card-price" style="color: black;">&#8377;<%= Product.price ? Product.price.toLocaleString("en-IN") : "Price not available" %></p>
    <form action="/product/<%=Product._id%>" method="get">
    <button class="btn btn-outline-success cartButton">Add Cart</button>
  </form>
</div>
  </div>
</div>
    </div>
    <div>
        <h2>Locate your Product</h2>
<div id="map"></div>
<button id="addMarker" onclick="addMarker()">Farm to You-View Origin</button>
</div>
</div>

<script>
    const productCoordinates = <%= JSON.stringify(Product.geometry.coordinates) %>;
	mapboxgl.accessToken = 'pk.eyJ1IjoibmFtcmF0YS0yODExIiwiYSI6ImNtYWUwMjExejAyYTYycHMyMGZoeG1oMmIifQ.VvuvA54s3Y10GRyue550hQ';
    const map = new mapboxgl.Map({
        container: 'map',
        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/mapbox/streets-v12',
        center: productCoordinates,
        zoom: 10
    });

    // Create the marker element. To allow CSS transform properties to animate
    // the marker styles, we create an inner div which will receive the animation transforms
    // while GL JS continues to operate on the outer marker div apply transform/translate to correctly
    // position the marker on the map
    const markerEl = document.createElement('div');
    const markerInner = document.createElement('div');
    markerInner.className = 'marker';
    markerEl.appendChild(markerInner);

    // declare Marker
    let marker;
    let markerRendered = false;

    // eslint-disable-next-line no-unused-vars
    function addMarker() {
        const btn = document.getElementById('addMarker');
        const popup = new mapboxgl.Popup({ offset: 25 }).setText(
        'Your Product location is:-<%= Product.location %>'
    );
    const el = document.createElement('div');
    el.id = 'marker';
        if (!markerRendered) {
            // Add marker to the map
            marker = new mapboxgl.Marker(markerEl)
                .setLngLat(productCoordinates)
                .setPopup(popup)
                .addTo(map);

            btn.textContent = 'Reset';
            markerRendered = true;
        } else {
            marker.remove();
            btn.textContent = 'Add Marker to the Map';
            markerRendered = false;
        }
    }
</script>
